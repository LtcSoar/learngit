第一次纸面作业

1. 给以下程序加上必要的注释，指出其功能，并分析时间复杂度。

(1) int sum(int n)
　　{ 	int s=0；                                                  
　　for(int i=1；i<=n；i++)                                        //n次循环
　　{	int p=1；                                                  //p每次都初始化为1
　　for(int j=1；j<=i；j++) p*=j；                                  //相当于i！
　　s+=p；                                                          //相当于i！再相加 相加的结果是s
　　}
　　return s；
　　}	                                                         
    功能：得到s=1！+2！+...+n！
	时间复杂度：以最内层循环的p*=j为基本操作   n(n-1)/2   即O(n^2)
(2) 	int fac(int n)      
　　{ 	int p=1,s=0；                                              //p初始化为1
　　for(int i=1；i<=n；i++)
　　{	 p*=i；                                                    //p每次都乘以一个更大的i  每次p=i！
　　s+=p；                                                         //每次的p相加
　　}
　　return s；
　　}
     功能：得到s=1！+2！+...+n！
	 时间复杂度：以内层循环的p*=i；和s+=p；为基本操作 2n 即O（n）
　　
　　
　　
　　
　　
　　
　　
	
2. 设数据元素的集合为D={a1,a2,a3,a4,a5,a6}，请分别画出与以下各关系R 对应的数据结构B=(D,R)的结构示意图，并指出它属于哪类结构。
　　(1) R={(a3,a4),(a4,a5),(a1,a2),(a2,a3),(a5,a6)}
　　(2) R={(a3,a2),(a2,a4),(a3,a1),(a2,a5),(a2,a6)}
　　(3) R={(ai+1,ai)︱i=5,4,3,2,1}
　　(4) R={(ai,aj)︱i>j}
　　(5) R={ }
　　
　　
　　
　　
　　
	
3. 分别写一个算法，对带表头结点和不带表头结点的情况，实现将两个有序的线性链表合并为一个有序链表，合并后使原链表为空。

(1) 带表头
void mergeList(LinkList &HA,LinkList &HB,LinkList &HC){
/*HA和HB为非递减有序线性链表，合并为非递减有序线性链表HC
*HA.head是第一个结点
*结点数据类型为
*	struct SNode{
*		int data;
*		SNode *next;
*		SNode():data(0),next(NULL){}
*	};
*/
    int longlength=HA.Length()+HB.Length()-2;
    int i,j,t;
    int *p1=new int[longlength];
    for(i=1;i<HA.Length();i++)
    {
        HA.GetElem(i,p1[i-1])
    }
	i++;
    for(;i<longlength+1;i++)
	{
	    HB.GetElem(i-HA.length(),p1[i-1]);
	}
	for(i=0,i<longlength-1;i++)
	{
	    for(j=i+1;j<longlength;j++)
		{
		    if(p1[i]<p1[j])
			{
			    t=p1[i];
				p1[i]=p1[j];
				p1[j]=t;
			}
		}
	}
	for(i=1;i<longlength+1;i++)
	    HC.Insert(i,p1[i-1]);
	HA.clearSqList();
	HB.clearSqList();
}
//所用类即课本中定义的类	
	


(2)  不带表头
void mergeList(LinkList &HA,LinkList &HB,LinkList &HC)
{
    int longlength=HA.Length()+HB.Length();
    int i,j,t;
    int *p1=new int[longlength];
    for(i=0;i<HA.Length();i++)
    {
        HA.GetElem(i,p1[i])
    }
    for(;i<longlength;i++)
	{
	    HB.GetElem(i-HA.length(),p1[i]);
	}
	for(i=0,i<longlength-1;i++)
	{
	    for(j=i+1;j<longlength;j++)
		{
		    if(p1[i]<p1[j])
			{
			    t=p1[i];
				p1[i]=p1[j];
				p1[j]=t;
			}
		}
	}
	for(i=0;i<longlength;i++)
	    HC.Insert(i,p1[i]);
	HA.clearSqList();
	HB.clearSqList();
}


4.分别实现逆转顺序表和逆转链表的算法，使表中最后一个元素成为第一个元素，倒数第二个元素成为第二个元素，以此类推。对于链表逆序算法，必须交换结点，而不是结点中的数据。

(1)
class SeqList{
public:
	int length;
	int *list;
　　SeqList(int n){
　　length=0;
　　list=new int[n]; //分配一个足够大的空间
　　}
};

void inverseSeqList(SeqList &L){


}





(2)
void inverseLinkList(LinkList &HL){
//LinkList和SNode定义同上一题，链表不带表头
HL



}















5. 如果3个元素进栈顺序为X、Y、Z，试写出所有可能的出栈顺序（可能后来者进栈时，先来者已经出栈）。

X Y Z	Y X Z	Y Z X	Z Y X
X进入后出或者不出  Y进入后出或者不出 所以总的一共4种可能




6. 在线性链表中查找结点值为x的第一个结点，并返回其指针的递归算法。

struct NODE{
	ElemType data;
	NODE *next;
	NODE():data(0),next(NULL){}
};

NODE *list_find(NODE *current, ElemType x)
{
   while(current->data!=x)
	{ 
	    find(current->next,x)
	}
	return current;
}






7. 给以下程序加上必要的注释，指出其功能，并分析时间复杂度。
　　
void writ(int n)
{ 	if(n!=0)
	{	writ(n-1);                  //如果n不是0 那么实施writ(n-1)
　　cout<<n<<endl;
		return;
	}
}
功能：输出为：0
              1
			  2
			  3
			  4
			  .....
			  n
时间复杂度：2n 即O（n）


